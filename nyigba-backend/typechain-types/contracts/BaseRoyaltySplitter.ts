/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BaseRoyaltySplitter {
  export type RoyaltyShareStruct = {
    recipient: AddressLike;
    percentage: BigNumberish;
    active: boolean;
  };

  export type RoyaltyShareStructOutput = [
    recipient: string,
    percentage: bigint,
    active: boolean
  ] & { recipient: string; percentage: bigint; active: boolean };

  export type SplitStruct = {
    tokenAddress: AddressLike;
    totalAmount: BigNumberish;
    distributedAmount: BigNumberish;
    completed: boolean;
    createdAt: BigNumberish;
  };

  export type SplitStructOutput = [
    tokenAddress: string,
    totalAmount: bigint,
    distributedAmount: bigint,
    completed: boolean,
    createdAt: bigint
  ] & {
    tokenAddress: string;
    totalAmount: bigint;
    distributedAmount: bigint;
    completed: boolean;
    createdAt: bigint;
  };
}

export interface BaseRoyaltySplitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_DISTRIBUTION_TIMEOUT"
      | "BASE_MAX_SHARES"
      | "BASIS_POINTS"
      | "addRecipient"
      | "allSplitIds"
      | "createRoyaltySplit"
      | "creatorSplits"
      | "distributeRoyalties"
      | "emergencyWithdraw"
      | "getAllSplitIds"
      | "getCreatorSplits"
      | "getRoyaltySplit"
      | "getSplit"
      | "owner"
      | "removeRecipient"
      | "renounceOwnership"
      | "royaltySplits"
      | "splits"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "RecipientAdded"
      | "RecipientRemoved"
      | "RoyaltyDistributed"
      | "RoyaltySplitCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_DISTRIBUTION_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_MAX_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRecipient",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allSplitIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createRoyaltySplit",
    values: [BytesLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorSplits",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRoyalties",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSplitIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorSplits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltySplit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getSplit", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeRecipient",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltySplits",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "splits", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_DISTRIBUTION_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_MAX_SHARES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allSplitIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRoyaltySplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRoyalties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSplitIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorSplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltySplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSplit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltySplits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "splits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientAddedEvent {
  export type InputTuple = [
    splitId: BytesLike,
    recipient: AddressLike,
    percentage: BigNumberish
  ];
  export type OutputTuple = [
    splitId: string,
    recipient: string,
    percentage: bigint
  ];
  export interface OutputObject {
    splitId: string;
    recipient: string;
    percentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientRemovedEvent {
  export type InputTuple = [splitId: BytesLike, recipient: AddressLike];
  export type OutputTuple = [splitId: string, recipient: string];
  export interface OutputObject {
    splitId: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyDistributedEvent {
  export type InputTuple = [
    splitId: BytesLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [splitId: string, token: string, amount: bigint];
  export interface OutputObject {
    splitId: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltySplitCreatedEvent {
  export type InputTuple = [
    splitId: BytesLike,
    creator: AddressLike,
    totalShares: BigNumberish
  ];
  export type OutputTuple = [
    splitId: string,
    creator: string,
    totalShares: bigint
  ];
  export interface OutputObject {
    splitId: string;
    creator: string;
    totalShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseRoyaltySplitter extends BaseContract {
  connect(runner?: ContractRunner | null): BaseRoyaltySplitter;
  waitForDeployment(): Promise<this>;

  interface: BaseRoyaltySplitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_DISTRIBUTION_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  BASE_MAX_SHARES: TypedContractMethod<[], [bigint], "view">;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  addRecipient: TypedContractMethod<
    [splitId: BytesLike, recipient: AddressLike, percentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  allSplitIds: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createRoyaltySplit: TypedContractMethod<
    [
      splitId: BytesLike,
      recipients: AddressLike[],
      percentages: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  creatorSplits: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  distributeRoyalties: TypedContractMethod<
    [splitId: BytesLike, tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllSplitIds: TypedContractMethod<[], [string[]], "view">;

  getCreatorSplits: TypedContractMethod<
    [creator: AddressLike],
    [string[]],
    "view"
  >;

  getRoyaltySplit: TypedContractMethod<
    [splitId: BytesLike],
    [BaseRoyaltySplitter.RoyaltyShareStructOutput[]],
    "view"
  >;

  getSplit: TypedContractMethod<
    [splitId: BytesLike],
    [BaseRoyaltySplitter.SplitStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeRecipient: TypedContractMethod<
    [splitId: BytesLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  royaltySplits: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, boolean] & {
        recipient: string;
        percentage: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  splits: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean, bigint] & {
        tokenAddress: string;
        totalAmount: bigint;
        distributedAmount: bigint;
        completed: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_DISTRIBUTION_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BASE_MAX_SHARES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addRecipient"
  ): TypedContractMethod<
    [splitId: BytesLike, recipient: AddressLike, percentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allSplitIds"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createRoyaltySplit"
  ): TypedContractMethod<
    [
      splitId: BytesLike,
      recipients: AddressLike[],
      percentages: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creatorSplits"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "distributeRoyalties"
  ): TypedContractMethod<
    [splitId: BytesLike, tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllSplitIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCreatorSplits"
  ): TypedContractMethod<[creator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoyaltySplit"
  ): TypedContractMethod<
    [splitId: BytesLike],
    [BaseRoyaltySplitter.RoyaltyShareStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSplit"
  ): TypedContractMethod<
    [splitId: BytesLike],
    [BaseRoyaltySplitter.SplitStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeRecipient"
  ): TypedContractMethod<
    [splitId: BytesLike, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "royaltySplits"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, bigint, boolean] & {
        recipient: string;
        percentage: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "splits"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean, bigint] & {
        tokenAddress: string;
        totalAmount: bigint;
        distributedAmount: bigint;
        completed: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RecipientAdded"
  ): TypedContractEvent<
    RecipientAddedEvent.InputTuple,
    RecipientAddedEvent.OutputTuple,
    RecipientAddedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientRemoved"
  ): TypedContractEvent<
    RecipientRemovedEvent.InputTuple,
    RecipientRemovedEvent.OutputTuple,
    RecipientRemovedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyDistributed"
  ): TypedContractEvent<
    RoyaltyDistributedEvent.InputTuple,
    RoyaltyDistributedEvent.OutputTuple,
    RoyaltyDistributedEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltySplitCreated"
  ): TypedContractEvent<
    RoyaltySplitCreatedEvent.InputTuple,
    RoyaltySplitCreatedEvent.OutputTuple,
    RoyaltySplitCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RecipientAdded(bytes32,address,uint256)": TypedContractEvent<
      RecipientAddedEvent.InputTuple,
      RecipientAddedEvent.OutputTuple,
      RecipientAddedEvent.OutputObject
    >;
    RecipientAdded: TypedContractEvent<
      RecipientAddedEvent.InputTuple,
      RecipientAddedEvent.OutputTuple,
      RecipientAddedEvent.OutputObject
    >;

    "RecipientRemoved(bytes32,address)": TypedContractEvent<
      RecipientRemovedEvent.InputTuple,
      RecipientRemovedEvent.OutputTuple,
      RecipientRemovedEvent.OutputObject
    >;
    RecipientRemoved: TypedContractEvent<
      RecipientRemovedEvent.InputTuple,
      RecipientRemovedEvent.OutputTuple,
      RecipientRemovedEvent.OutputObject
    >;

    "RoyaltyDistributed(bytes32,address,uint256)": TypedContractEvent<
      RoyaltyDistributedEvent.InputTuple,
      RoyaltyDistributedEvent.OutputTuple,
      RoyaltyDistributedEvent.OutputObject
    >;
    RoyaltyDistributed: TypedContractEvent<
      RoyaltyDistributedEvent.InputTuple,
      RoyaltyDistributedEvent.OutputTuple,
      RoyaltyDistributedEvent.OutputObject
    >;

    "RoyaltySplitCreated(bytes32,address,uint256)": TypedContractEvent<
      RoyaltySplitCreatedEvent.InputTuple,
      RoyaltySplitCreatedEvent.OutputTuple,
      RoyaltySplitCreatedEvent.OutputObject
    >;
    RoyaltySplitCreated: TypedContractEvent<
      RoyaltySplitCreatedEvent.InputTuple,
      RoyaltySplitCreatedEvent.OutputTuple,
      RoyaltySplitCreatedEvent.OutputObject
    >;
  };
}
