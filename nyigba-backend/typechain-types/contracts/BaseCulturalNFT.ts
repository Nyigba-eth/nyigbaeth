/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BaseCulturalNFT {
  export type CulturalAssetStruct = {
    name: string;
    description: string;
    culturalOrigin: string;
    language: string;
    category: string;
    artistName: string;
    creationDate: BigNumberish;
    ipfsHash: string;
    verified: boolean;
  };

  export type CulturalAssetStructOutput = [
    name: string,
    description: string,
    culturalOrigin: string,
    language: string,
    category: string,
    artistName: string,
    creationDate: bigint,
    ipfsHash: string,
    verified: boolean
  ] & {
    name: string;
    description: string;
    culturalOrigin: string;
    language: string;
    category: string;
    artistName: string;
    creationDate: bigint;
    ipfsHash: string;
    verified: boolean;
  };
}

export interface BaseCulturalNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_BLOCK_TIME"
      | "LOW_GAS_PRICE"
      | "MAX_BATCH_MINT"
      | "approve"
      | "artistTokens"
      | "balanceOf"
      | "batchMintCulturalAssets"
      | "culturalAssets"
      | "emergencyWithdraw"
      | "getApproved"
      | "getArtistTokens"
      | "getCulturalAsset"
      | "getTokensByOrigin"
      | "getVerifiedOrigins"
      | "isApprovedForAll"
      | "mintCulturalAsset"
      | "name"
      | "nextTokenId"
      | "owner"
      | "ownerOf"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "verifiedOrigins"
      | "verifyOrigin"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "BatchMintExecuted"
      | "CulturalAssetMinted"
      | "MetadataUpdate"
      | "OriginVerified"
      | "OwnershipTransferred"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_BLOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOW_GAS_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BATCH_MINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artistTokens",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMintCulturalAssets",
    values: [AddressLike, string[], BaseCulturalNFT.CulturalAssetStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "culturalAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtistTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCulturalAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensByOrigin",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifiedOrigins",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCulturalAsset",
    values: [AddressLike, string, BaseCulturalNFT.CulturalAssetStruct]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedOrigins",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyOrigin",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_BLOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOW_GAS_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BATCH_MINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "artistTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchMintCulturalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "culturalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtistTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCulturalAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensByOrigin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifiedOrigins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintCulturalAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedOrigins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyOrigin",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMintExecutedEvent {
  export type InputTuple = [artist: AddressLike, tokenIds: BigNumberish[]];
  export type OutputTuple = [artist: string, tokenIds: bigint[]];
  export interface OutputObject {
    artist: string;
    tokenIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CulturalAssetMintedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    artist: AddressLike,
    culturalOrigin: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    artist: string,
    culturalOrigin: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    artist: string;
    culturalOrigin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OriginVerifiedEvent {
  export type InputTuple = [origin: string, verifier: AddressLike];
  export type OutputTuple = [origin: string, verifier: string];
  export interface OutputObject {
    origin: string;
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseCulturalNFT extends BaseContract {
  connect(runner?: ContractRunner | null): BaseCulturalNFT;
  waitForDeployment(): Promise<this>;

  interface: BaseCulturalNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_BLOCK_TIME: TypedContractMethod<[], [bigint], "view">;

  LOW_GAS_PRICE: TypedContractMethod<[], [bigint], "view">;

  MAX_BATCH_MINT: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  artistTokens: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  batchMintCulturalAssets: TypedContractMethod<
    [
      to: AddressLike,
      uris: string[],
      assets: BaseCulturalNFT.CulturalAssetStruct[]
    ],
    [bigint[]],
    "nonpayable"
  >;

  culturalAssets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        string,
        boolean
      ] & {
        name: string;
        description: string;
        culturalOrigin: string;
        language: string;
        category: string;
        artistName: string;
        creationDate: bigint;
        ipfsHash: string;
        verified: boolean;
      }
    ],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getArtistTokens: TypedContractMethod<
    [artist: AddressLike],
    [bigint[]],
    "view"
  >;

  getCulturalAsset: TypedContractMethod<
    [tokenId: BigNumberish],
    [BaseCulturalNFT.CulturalAssetStructOutput],
    "view"
  >;

  getTokensByOrigin: TypedContractMethod<
    [origin: string, startIndex: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;

  getVerifiedOrigins: TypedContractMethod<[], [string[]], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  mintCulturalAsset: TypedContractMethod<
    [to: AddressLike, uri: string, asset: BaseCulturalNFT.CulturalAssetStruct],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nextTokenId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifiedOrigins: TypedContractMethod<[arg0: string], [boolean], "view">;

  verifyOrigin: TypedContractMethod<[origin: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_BLOCK_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOW_GAS_PRICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_BATCH_MINT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "artistTokens"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchMintCulturalAssets"
  ): TypedContractMethod<
    [
      to: AddressLike,
      uris: string[],
      assets: BaseCulturalNFT.CulturalAssetStruct[]
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "culturalAssets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        string,
        boolean
      ] & {
        name: string;
        description: string;
        culturalOrigin: string;
        language: string;
        category: string;
        artistName: string;
        creationDate: bigint;
        ipfsHash: string;
        verified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getArtistTokens"
  ): TypedContractMethod<[artist: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getCulturalAsset"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [BaseCulturalNFT.CulturalAssetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokensByOrigin"
  ): TypedContractMethod<
    [origin: string, startIndex: BigNumberish, limit: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVerifiedOrigins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintCulturalAsset"
  ): TypedContractMethod<
    [to: AddressLike, uri: string, asset: BaseCulturalNFT.CulturalAssetStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifiedOrigins"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyOrigin"
  ): TypedContractMethod<[origin: string], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "BatchMintExecuted"
  ): TypedContractEvent<
    BatchMintExecutedEvent.InputTuple,
    BatchMintExecutedEvent.OutputTuple,
    BatchMintExecutedEvent.OutputObject
  >;
  getEvent(
    key: "CulturalAssetMinted"
  ): TypedContractEvent<
    CulturalAssetMintedEvent.InputTuple,
    CulturalAssetMintedEvent.OutputTuple,
    CulturalAssetMintedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OriginVerified"
  ): TypedContractEvent<
    OriginVerifiedEvent.InputTuple,
    OriginVerifiedEvent.OutputTuple,
    OriginVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "BatchMintExecuted(address,uint256[])": TypedContractEvent<
      BatchMintExecutedEvent.InputTuple,
      BatchMintExecutedEvent.OutputTuple,
      BatchMintExecutedEvent.OutputObject
    >;
    BatchMintExecuted: TypedContractEvent<
      BatchMintExecutedEvent.InputTuple,
      BatchMintExecutedEvent.OutputTuple,
      BatchMintExecutedEvent.OutputObject
    >;

    "CulturalAssetMinted(uint256,address,string)": TypedContractEvent<
      CulturalAssetMintedEvent.InputTuple,
      CulturalAssetMintedEvent.OutputTuple,
      CulturalAssetMintedEvent.OutputObject
    >;
    CulturalAssetMinted: TypedContractEvent<
      CulturalAssetMintedEvent.InputTuple,
      CulturalAssetMintedEvent.OutputTuple,
      CulturalAssetMintedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OriginVerified(string,address)": TypedContractEvent<
      OriginVerifiedEvent.InputTuple,
      OriginVerifiedEvent.OutputTuple,
      OriginVerifiedEvent.OutputObject
    >;
    OriginVerified: TypedContractEvent<
      OriginVerifiedEvent.InputTuple,
      OriginVerifiedEvent.OutputTuple,
      OriginVerifiedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
