/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ENSPaymentRouter {
  export type AgentTransactionStruct = {
    fromAgent: BytesLike;
    toAgent: BytesLike;
    amount: BigNumberish;
    purpose: string;
    timestamp: BigNumberish;
    executed: boolean;
  };

  export type AgentTransactionStructOutput = [
    fromAgent: string,
    toAgent: string,
    amount: bigint,
    purpose: string,
    timestamp: bigint,
    executed: boolean
  ] & {
    fromAgent: string;
    toAgent: string;
    amount: bigint;
    purpose: string;
    timestamp: bigint;
    executed: boolean;
  };

  export type PaymentChannelStruct = {
    sender: AddressLike;
    recipient: AddressLike;
    ensContract: AddressLike;
    nameNode: BytesLike;
    fee: BigNumberish;
    isActive: boolean;
    totalVolume: BigNumberish;
    transactionCount: BigNumberish;
  };

  export type PaymentChannelStructOutput = [
    sender: string,
    recipient: string,
    ensContract: string,
    nameNode: string,
    fee: bigint,
    isActive: boolean,
    totalVolume: bigint,
    transactionCount: bigint
  ] & {
    sender: string;
    recipient: string;
    ensContract: string;
    nameNode: string;
    fee: bigint;
    isActive: boolean;
    totalVolume: bigint;
    transactionCount: bigint;
  };
}

export interface ENSPaymentRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE"
      | "agentTransactions"
      | "createPaymentChannel"
      | "emergencyWithdraw"
      | "executeAgentTransaction"
      | "getAgentTransactions"
      | "getPaymentChannel"
      | "getUserChannels"
      | "initiateAgentTransaction"
      | "nyigbaNamesContract"
      | "owner"
      | "paymentChannels"
      | "processENSPayment"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateRotatingAddress"
      | "userChannels"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentTransactionInitiated"
      | "ENSPaymentProcessed"
      | "OwnershipTransferred"
      | "PaymentChannelCreated"
      | "RotatingAddressUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "agentTransactions",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPaymentChannel",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeAgentTransaction",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgentTransactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentChannel",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserChannels",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateAgentTransaction",
    values: [BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nyigbaNamesContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentChannels",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processENSPayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRotatingAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userChannels",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "agentTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPaymentChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAgentTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAgentTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateAgentTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nyigbaNamesContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processENSPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRotatingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userChannels",
    data: BytesLike
  ): Result;
}

export namespace AgentTransactionInitiatedEvent {
  export type InputTuple = [
    fromAgent: BytesLike,
    toAgent: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    fromAgent: string,
    toAgent: string,
    amount: bigint
  ];
  export interface OutputObject {
    fromAgent: string;
    toAgent: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ENSPaymentProcessedEvent {
  export type InputTuple = [
    channelId: BytesLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [channelId: string, amount: bigint, fee: bigint];
  export interface OutputObject {
    channelId: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentChannelCreatedEvent {
  export type InputTuple = [
    channelId: BytesLike,
    sender: AddressLike,
    nameNode: BytesLike
  ];
  export type OutputTuple = [
    channelId: string,
    sender: string,
    nameNode: string
  ];
  export interface OutputObject {
    channelId: string;
    sender: string;
    nameNode: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RotatingAddressUpdatedEvent {
  export type InputTuple = [nameNode: BytesLike, newAddress: AddressLike];
  export type OutputTuple = [nameNode: string, newAddress: string];
  export interface OutputObject {
    nameNode: string;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ENSPaymentRouter extends BaseContract {
  connect(runner?: ContractRunner | null): ENSPaymentRouter;
  waitForDeployment(): Promise<this>;

  interface: ENSPaymentRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE: TypedContractMethod<[], [bigint], "view">;

  agentTransactions: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, string, bigint, string, bigint, boolean] & {
        fromAgent: string;
        toAgent: string;
        amount: bigint;
        purpose: string;
        timestamp: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  createPaymentChannel: TypedContractMethod<
    [nameNode: BytesLike, recipient: AddressLike, fee: BigNumberish],
    [string],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  executeAgentTransaction: TypedContractMethod<
    [
      fromAgent: BytesLike,
      transactionIndex: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getAgentTransactions: TypedContractMethod<
    [agentId: BytesLike],
    [ENSPaymentRouter.AgentTransactionStructOutput[]],
    "view"
  >;

  getPaymentChannel: TypedContractMethod<
    [channelId: BytesLike],
    [ENSPaymentRouter.PaymentChannelStructOutput],
    "view"
  >;

  getUserChannels: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  initiateAgentTransaction: TypedContractMethod<
    [
      fromAgent: BytesLike,
      toAgent: BytesLike,
      amount: BigNumberish,
      purpose: string
    ],
    [void],
    "payable"
  >;

  nyigbaNamesContract: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentChannels: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, boolean, bigint, bigint] & {
        sender: string;
        recipient: string;
        ensContract: string;
        nameNode: string;
        fee: bigint;
        isActive: boolean;
        totalVolume: bigint;
        transactionCount: bigint;
      }
    ],
    "view"
  >;

  processENSPayment: TypedContractMethod<
    [channelId: BytesLike],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRotatingAddress: TypedContractMethod<
    [nameNode: BytesLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  userChannels: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "agentTransactions"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [
      [string, string, bigint, string, bigint, boolean] & {
        fromAgent: string;
        toAgent: string;
        amount: bigint;
        purpose: string;
        timestamp: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createPaymentChannel"
  ): TypedContractMethod<
    [nameNode: BytesLike, recipient: AddressLike, fee: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeAgentTransaction"
  ): TypedContractMethod<
    [
      fromAgent: BytesLike,
      transactionIndex: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAgentTransactions"
  ): TypedContractMethod<
    [agentId: BytesLike],
    [ENSPaymentRouter.AgentTransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentChannel"
  ): TypedContractMethod<
    [channelId: BytesLike],
    [ENSPaymentRouter.PaymentChannelStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserChannels"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "initiateAgentTransaction"
  ): TypedContractMethod<
    [
      fromAgent: BytesLike,
      toAgent: BytesLike,
      amount: BigNumberish,
      purpose: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "nyigbaNamesContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentChannels"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, boolean, bigint, bigint] & {
        sender: string;
        recipient: string;
        ensContract: string;
        nameNode: string;
        fee: bigint;
        isActive: boolean;
        totalVolume: bigint;
        transactionCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "processENSPayment"
  ): TypedContractMethod<[channelId: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRotatingAddress"
  ): TypedContractMethod<
    [nameNode: BytesLike, newAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userChannels"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "AgentTransactionInitiated"
  ): TypedContractEvent<
    AgentTransactionInitiatedEvent.InputTuple,
    AgentTransactionInitiatedEvent.OutputTuple,
    AgentTransactionInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "ENSPaymentProcessed"
  ): TypedContractEvent<
    ENSPaymentProcessedEvent.InputTuple,
    ENSPaymentProcessedEvent.OutputTuple,
    ENSPaymentProcessedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentChannelCreated"
  ): TypedContractEvent<
    PaymentChannelCreatedEvent.InputTuple,
    PaymentChannelCreatedEvent.OutputTuple,
    PaymentChannelCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RotatingAddressUpdated"
  ): TypedContractEvent<
    RotatingAddressUpdatedEvent.InputTuple,
    RotatingAddressUpdatedEvent.OutputTuple,
    RotatingAddressUpdatedEvent.OutputObject
  >;

  filters: {
    "AgentTransactionInitiated(bytes32,bytes32,uint256)": TypedContractEvent<
      AgentTransactionInitiatedEvent.InputTuple,
      AgentTransactionInitiatedEvent.OutputTuple,
      AgentTransactionInitiatedEvent.OutputObject
    >;
    AgentTransactionInitiated: TypedContractEvent<
      AgentTransactionInitiatedEvent.InputTuple,
      AgentTransactionInitiatedEvent.OutputTuple,
      AgentTransactionInitiatedEvent.OutputObject
    >;

    "ENSPaymentProcessed(bytes32,uint256,uint256)": TypedContractEvent<
      ENSPaymentProcessedEvent.InputTuple,
      ENSPaymentProcessedEvent.OutputTuple,
      ENSPaymentProcessedEvent.OutputObject
    >;
    ENSPaymentProcessed: TypedContractEvent<
      ENSPaymentProcessedEvent.InputTuple,
      ENSPaymentProcessedEvent.OutputTuple,
      ENSPaymentProcessedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentChannelCreated(bytes32,address,bytes32)": TypedContractEvent<
      PaymentChannelCreatedEvent.InputTuple,
      PaymentChannelCreatedEvent.OutputTuple,
      PaymentChannelCreatedEvent.OutputObject
    >;
    PaymentChannelCreated: TypedContractEvent<
      PaymentChannelCreatedEvent.InputTuple,
      PaymentChannelCreatedEvent.OutputTuple,
      PaymentChannelCreatedEvent.OutputObject
    >;

    "RotatingAddressUpdated(bytes32,address)": TypedContractEvent<
      RotatingAddressUpdatedEvent.InputTuple,
      RotatingAddressUpdatedEvent.OutputTuple,
      RotatingAddressUpdatedEvent.OutputObject
    >;
    RotatingAddressUpdated: TypedContractEvent<
      RotatingAddressUpdatedEvent.InputTuple,
      RotatingAddressUpdatedEvent.OutputTuple,
      RotatingAddressUpdatedEvent.OutputObject
    >;
  };
}
