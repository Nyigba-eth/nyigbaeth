/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ArtistRegistry {
  export type ArtistApplicationStruct = {
    applicant: AddressLike;
    portfolio: string;
    bio: string;
    appliedAt: BigNumberish;
    approved: boolean;
    rejected: boolean;
    decidedAt: BigNumberish;
  };

  export type ArtistApplicationStructOutput = [
    applicant: string,
    portfolio: string,
    bio: string,
    appliedAt: bigint,
    approved: boolean,
    rejected: boolean,
    decidedAt: bigint
  ] & {
    applicant: string;
    portfolio: string;
    bio: string;
    appliedAt: bigint;
    approved: boolean;
    rejected: boolean;
    decidedAt: bigint;
  };
}

export interface ArtistRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ARTIST_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "GOVERNANCE_ROLE"
      | "applications"
      | "approveArtist"
      | "artists"
      | "getAllArtists"
      | "getApplication"
      | "getArtistCount"
      | "getPendingApplicationsCount"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isArtist"
      | "isRegisteredArtist"
      | "rejectArtist"
      | "renounceRole"
      | "requestArtistRole"
      | "revokeArtist"
      | "revokeRole"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArtistApplicationSubmitted"
      | "ArtistApproved"
      | "ArtistRejected"
      | "ArtistRevoked"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ARTIST_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNANCE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applications",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveArtist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "artists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllArtists",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApplication",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getArtistCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingApplicationsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isArtist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredArtist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectArtist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestArtistRole",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeArtist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ARTIST_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNANCE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "artists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllArtists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApplication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArtistCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingApplicationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isArtist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestArtistRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeArtist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace ArtistApplicationSubmittedEvent {
  export type InputTuple = [applicant: AddressLike, portfolio: string];
  export type OutputTuple = [applicant: string, portfolio: string];
  export interface OutputObject {
    applicant: string;
    portfolio: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArtistApprovedEvent {
  export type InputTuple = [artist: AddressLike, approvedBy: AddressLike];
  export type OutputTuple = [artist: string, approvedBy: string];
  export interface OutputObject {
    artist: string;
    approvedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArtistRejectedEvent {
  export type InputTuple = [artist: AddressLike, rejectedBy: AddressLike];
  export type OutputTuple = [artist: string, rejectedBy: string];
  export interface OutputObject {
    artist: string;
    rejectedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArtistRevokedEvent {
  export type InputTuple = [artist: AddressLike, revokedBy: AddressLike];
  export type OutputTuple = [artist: string, revokedBy: string];
  export interface OutputObject {
    artist: string;
    revokedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArtistRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ArtistRegistry;
  waitForDeployment(): Promise<this>;

  interface: ArtistRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ARTIST_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GOVERNANCE_ROLE: TypedContractMethod<[], [string], "view">;

  applications: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean, boolean, bigint] & {
        applicant: string;
        portfolio: string;
        bio: string;
        appliedAt: bigint;
        approved: boolean;
        rejected: boolean;
        decidedAt: bigint;
      }
    ],
    "view"
  >;

  approveArtist: TypedContractMethod<
    [artist: AddressLike],
    [void],
    "nonpayable"
  >;

  artists: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAllArtists: TypedContractMethod<[], [string[]], "view">;

  getApplication: TypedContractMethod<
    [artist: AddressLike],
    [ArtistRegistry.ArtistApplicationStructOutput],
    "view"
  >;

  getArtistCount: TypedContractMethod<[], [bigint], "view">;

  getPendingApplicationsCount: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isArtist: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isRegisteredArtist: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  rejectArtist: TypedContractMethod<
    [artist: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestArtistRole: TypedContractMethod<
    [portfolio: string, bio: string],
    [void],
    "nonpayable"
  >;

  revokeArtist: TypedContractMethod<
    [artist: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ARTIST_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GOVERNANCE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "applications"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, boolean, boolean, bigint] & {
        applicant: string;
        portfolio: string;
        bio: string;
        appliedAt: bigint;
        approved: boolean;
        rejected: boolean;
        decidedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "approveArtist"
  ): TypedContractMethod<[artist: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "artists"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllArtists"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getApplication"
  ): TypedContractMethod<
    [artist: AddressLike],
    [ArtistRegistry.ArtistApplicationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getArtistCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingApplicationsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isArtist"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegisteredArtist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "rejectArtist"
  ): TypedContractMethod<[artist: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestArtistRole"
  ): TypedContractMethod<
    [portfolio: string, bio: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeArtist"
  ): TypedContractMethod<[artist: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "ArtistApplicationSubmitted"
  ): TypedContractEvent<
    ArtistApplicationSubmittedEvent.InputTuple,
    ArtistApplicationSubmittedEvent.OutputTuple,
    ArtistApplicationSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ArtistApproved"
  ): TypedContractEvent<
    ArtistApprovedEvent.InputTuple,
    ArtistApprovedEvent.OutputTuple,
    ArtistApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ArtistRejected"
  ): TypedContractEvent<
    ArtistRejectedEvent.InputTuple,
    ArtistRejectedEvent.OutputTuple,
    ArtistRejectedEvent.OutputObject
  >;
  getEvent(
    key: "ArtistRevoked"
  ): TypedContractEvent<
    ArtistRevokedEvent.InputTuple,
    ArtistRevokedEvent.OutputTuple,
    ArtistRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "ArtistApplicationSubmitted(address,string)": TypedContractEvent<
      ArtistApplicationSubmittedEvent.InputTuple,
      ArtistApplicationSubmittedEvent.OutputTuple,
      ArtistApplicationSubmittedEvent.OutputObject
    >;
    ArtistApplicationSubmitted: TypedContractEvent<
      ArtistApplicationSubmittedEvent.InputTuple,
      ArtistApplicationSubmittedEvent.OutputTuple,
      ArtistApplicationSubmittedEvent.OutputObject
    >;

    "ArtistApproved(address,address)": TypedContractEvent<
      ArtistApprovedEvent.InputTuple,
      ArtistApprovedEvent.OutputTuple,
      ArtistApprovedEvent.OutputObject
    >;
    ArtistApproved: TypedContractEvent<
      ArtistApprovedEvent.InputTuple,
      ArtistApprovedEvent.OutputTuple,
      ArtistApprovedEvent.OutputObject
    >;

    "ArtistRejected(address,address)": TypedContractEvent<
      ArtistRejectedEvent.InputTuple,
      ArtistRejectedEvent.OutputTuple,
      ArtistRejectedEvent.OutputObject
    >;
    ArtistRejected: TypedContractEvent<
      ArtistRejectedEvent.InputTuple,
      ArtistRejectedEvent.OutputTuple,
      ArtistRejectedEvent.OutputObject
    >;

    "ArtistRevoked(address,address)": TypedContractEvent<
      ArtistRevokedEvent.InputTuple,
      ArtistRevokedEvent.OutputTuple,
      ArtistRevokedEvent.OutputObject
    >;
    ArtistRevoked: TypedContractEvent<
      ArtistRevokedEvent.InputTuple,
      ArtistRevokedEvent.OutputTuple,
      ArtistRevokedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
