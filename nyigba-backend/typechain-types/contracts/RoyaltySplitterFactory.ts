/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RoyaltySplitterFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allSplitters"
      | "artistSplitters"
      | "createCustomSplitter"
      | "createSplitter"
      | "defaultArtistShare"
      | "defaultTreasuryShare"
      | "getAllSplitters"
      | "getSplitter"
      | "getSplitterCount"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "treasury"
      | "updateDefaultShares"
      | "updateTreasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DefaultSharesUpdated"
      | "OwnershipTransferred"
      | "SplitterCreated"
      | "TreasuryUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allSplitters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artistSplitters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCustomSplitter",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSplitter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultArtistShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultTreasuryShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllSplitters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSplitter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSplitterCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDefaultShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allSplitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artistSplitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCustomSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultArtistShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultTreasuryShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllSplitters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSplitterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
}

export namespace DefaultSharesUpdatedEvent {
  export type InputTuple = [
    artistShare: BigNumberish,
    treasuryShare: BigNumberish
  ];
  export type OutputTuple = [artistShare: bigint, treasuryShare: bigint];
  export interface OutputObject {
    artistShare: bigint;
    treasuryShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitterCreatedEvent {
  export type InputTuple = [
    artist: AddressLike,
    splitter: AddressLike,
    artistShare: BigNumberish,
    treasuryShare: BigNumberish
  ];
  export type OutputTuple = [
    artist: string,
    splitter: string,
    artistShare: bigint,
    treasuryShare: bigint
  ];
  export interface OutputObject {
    artist: string;
    splitter: string;
    artistShare: bigint;
    treasuryShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [oldTreasury: AddressLike, newTreasury: AddressLike];
  export type OutputTuple = [oldTreasury: string, newTreasury: string];
  export interface OutputObject {
    oldTreasury: string;
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RoyaltySplitterFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RoyaltySplitterFactory;
  waitForDeployment(): Promise<this>;

  interface: RoyaltySplitterFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allSplitters: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  artistSplitters: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  createCustomSplitter: TypedContractMethod<
    [
      artist: AddressLike,
      artistShare: BigNumberish,
      treasuryShare: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  createSplitter: TypedContractMethod<
    [artist: AddressLike],
    [string],
    "nonpayable"
  >;

  defaultArtistShare: TypedContractMethod<[], [bigint], "view">;

  defaultTreasuryShare: TypedContractMethod<[], [bigint], "view">;

  getAllSplitters: TypedContractMethod<[], [string[]], "view">;

  getSplitter: TypedContractMethod<[artist: AddressLike], [string], "view">;

  getSplitterCount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  updateDefaultShares: TypedContractMethod<
    [artistShare: BigNumberish, treasuryShare: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTreasury: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allSplitters"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "artistSplitters"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "createCustomSplitter"
  ): TypedContractMethod<
    [
      artist: AddressLike,
      artistShare: BigNumberish,
      treasuryShare: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSplitter"
  ): TypedContractMethod<[artist: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultArtistShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultTreasuryShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllSplitters"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSplitter"
  ): TypedContractMethod<[artist: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSplitterCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateDefaultShares"
  ): TypedContractMethod<
    [artistShare: BigNumberish, treasuryShare: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTreasury"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DefaultSharesUpdated"
  ): TypedContractEvent<
    DefaultSharesUpdatedEvent.InputTuple,
    DefaultSharesUpdatedEvent.OutputTuple,
    DefaultSharesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SplitterCreated"
  ): TypedContractEvent<
    SplitterCreatedEvent.InputTuple,
    SplitterCreatedEvent.OutputTuple,
    SplitterCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;

  filters: {
    "DefaultSharesUpdated(uint256,uint256)": TypedContractEvent<
      DefaultSharesUpdatedEvent.InputTuple,
      DefaultSharesUpdatedEvent.OutputTuple,
      DefaultSharesUpdatedEvent.OutputObject
    >;
    DefaultSharesUpdated: TypedContractEvent<
      DefaultSharesUpdatedEvent.InputTuple,
      DefaultSharesUpdatedEvent.OutputTuple,
      DefaultSharesUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SplitterCreated(address,address,uint256,uint256)": TypedContractEvent<
      SplitterCreatedEvent.InputTuple,
      SplitterCreatedEvent.OutputTuple,
      SplitterCreatedEvent.OutputObject
    >;
    SplitterCreated: TypedContractEvent<
      SplitterCreatedEvent.InputTuple,
      SplitterCreatedEvent.OutputTuple,
      SplitterCreatedEvent.OutputObject
    >;

    "TreasuryUpdated(address,address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
  };
}
