/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BaseCulturalMarketplace {
  export type ListingStruct = {
    tokenId: BigNumberish;
    seller: AddressLike;
    nftContract: AddressLike;
    price: BigNumberish;
    active: boolean;
    listedAt: BigNumberish;
  };

  export type ListingStructOutput = [
    tokenId: bigint,
    seller: string,
    nftContract: string,
    price: bigint,
    active: boolean,
    listedAt: bigint
  ] & {
    tokenId: bigint;
    seller: string;
    nftContract: string;
    price: bigint;
    active: boolean;
    listedAt: bigint;
  };

  export type OfferStruct = {
    buyer: AddressLike;
    price: BigNumberish;
    deadline: BigNumberish;
    active: boolean;
  };

  export type OfferStructOutput = [
    buyer: string,
    price: bigint,
    deadline: bigint,
    active: boolean
  ] & { buyer: string; price: bigint; deadline: bigint; active: boolean };
}

export interface BaseCulturalMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_FEE_PERCENTAGE"
      | "BASE_OFFER_DURATION"
      | "MAX_ACTIVE_LISTINGS"
      | "acceptOffer"
      | "buyNFT"
      | "cancelListing"
      | "emergencyWithdraw"
      | "feeRecipient"
      | "getListing"
      | "getOffers"
      | "getUserListings"
      | "listNFT"
      | "listings"
      | "makeOffer"
      | "offers"
      | "owner"
      | "renounceOwnership"
      | "totalListings"
      | "totalVolume"
      | "transferOwnership"
      | "updateFeeRecipient"
      | "userListingCount"
      | "userListings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ListingCancelled"
      | "NFTListed"
      | "NFTPurchased"
      | "NFTSold"
      | "OfferAccepted"
      | "OfferMade"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_OFFER_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ACTIVE_LISTINGS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOffers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserListings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userListingCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userListings",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_OFFER_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ACTIVE_LISTINGS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOffers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListingCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userListings",
    data: BytesLike
  ): Result;
}

export namespace ListingCancelledEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike
  ];
  export type OutputTuple = [
    nftContract: string,
    tokenId: bigint,
    seller: string
  ];
  export interface OutputObject {
    nftContract: string;
    tokenId: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTListedEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    nftContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTPurchasedEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    tokenId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftContract: string,
    tokenId: bigint,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    nftContract: string;
    tokenId: bigint;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTSoldEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    tokenId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftContract: string,
    tokenId: bigint,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    nftContract: string;
    tokenId: bigint;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferAcceptedEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftContract: string,
    tokenId: bigint,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    nftContract: string;
    tokenId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferMadeEvent {
  export type InputTuple = [
    nftContract: AddressLike,
    tokenId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    nftContract: string,
    tokenId: bigint,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    nftContract: string;
    tokenId: bigint;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseCulturalMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): BaseCulturalMarketplace;
  waitForDeployment(): Promise<this>;

  interface: BaseCulturalMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  BASE_OFFER_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_ACTIVE_LISTINGS: TypedContractMethod<[], [bigint], "view">;

  acceptOffer: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, offerIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyNFT: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;

  cancelListing: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getListing: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [BaseCulturalMarketplace.ListingStructOutput],
    "view"
  >;

  getOffers: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [BaseCulturalMarketplace.OfferStructOutput[]],
    "view"
  >;

  getUserListings: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  listNFT: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        tokenId: bigint;
        seller: string;
        nftContract: string;
        price: bigint;
        active: boolean;
        listedAt: bigint;
      }
    ],
    "view"
  >;

  makeOffer: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "payable"
  >;

  offers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        buyer: string;
        price: bigint;
        deadline: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalListings: TypedContractMethod<[], [bigint], "view">;

  totalVolume: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeeRecipient: TypedContractMethod<
    [newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  userListingCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  userListings: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BASE_OFFER_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_ACTIVE_LISTINGS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOffer"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, offerIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyNFT"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getListing"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [BaseCulturalMarketplace.ListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOffers"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [BaseCulturalMarketplace.OfferStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserListings"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "listNFT"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, string, bigint, boolean, bigint] & {
        tokenId: bigint;
        seller: string;
        nftContract: string;
        price: bigint;
        active: boolean;
        listedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeOffer"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "offers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BigNumberish],
    [
      [string, bigint, bigint, boolean] & {
        buyer: string;
        price: bigint;
        deadline: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalListings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVolume"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeRecipient"
  ): TypedContractMethod<[newRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userListingCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "userListings"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ListingCancelled"
  ): TypedContractEvent<
    ListingCancelledEvent.InputTuple,
    ListingCancelledEvent.OutputTuple,
    ListingCancelledEvent.OutputObject
  >;
  getEvent(
    key: "NFTListed"
  ): TypedContractEvent<
    NFTListedEvent.InputTuple,
    NFTListedEvent.OutputTuple,
    NFTListedEvent.OutputObject
  >;
  getEvent(
    key: "NFTPurchased"
  ): TypedContractEvent<
    NFTPurchasedEvent.InputTuple,
    NFTPurchasedEvent.OutputTuple,
    NFTPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "NFTSold"
  ): TypedContractEvent<
    NFTSoldEvent.InputTuple,
    NFTSoldEvent.OutputTuple,
    NFTSoldEvent.OutputObject
  >;
  getEvent(
    key: "OfferAccepted"
  ): TypedContractEvent<
    OfferAcceptedEvent.InputTuple,
    OfferAcceptedEvent.OutputTuple,
    OfferAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "OfferMade"
  ): TypedContractEvent<
    OfferMadeEvent.InputTuple,
    OfferMadeEvent.OutputTuple,
    OfferMadeEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ListingCancelled(address,uint256,address)": TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;
    ListingCancelled: TypedContractEvent<
      ListingCancelledEvent.InputTuple,
      ListingCancelledEvent.OutputTuple,
      ListingCancelledEvent.OutputObject
    >;

    "NFTListed(address,uint256,address,uint256)": TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;
    NFTListed: TypedContractEvent<
      NFTListedEvent.InputTuple,
      NFTListedEvent.OutputTuple,
      NFTListedEvent.OutputObject
    >;

    "NFTPurchased(address,uint256,address,uint256)": TypedContractEvent<
      NFTPurchasedEvent.InputTuple,
      NFTPurchasedEvent.OutputTuple,
      NFTPurchasedEvent.OutputObject
    >;
    NFTPurchased: TypedContractEvent<
      NFTPurchasedEvent.InputTuple,
      NFTPurchasedEvent.OutputTuple,
      NFTPurchasedEvent.OutputObject
    >;

    "NFTSold(address,uint256,address,uint256)": TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;
    NFTSold: TypedContractEvent<
      NFTSoldEvent.InputTuple,
      NFTSoldEvent.OutputTuple,
      NFTSoldEvent.OutputObject
    >;

    "OfferAccepted(address,uint256,address,uint256)": TypedContractEvent<
      OfferAcceptedEvent.InputTuple,
      OfferAcceptedEvent.OutputTuple,
      OfferAcceptedEvent.OutputObject
    >;
    OfferAccepted: TypedContractEvent<
      OfferAcceptedEvent.InputTuple,
      OfferAcceptedEvent.OutputTuple,
      OfferAcceptedEvent.OutputObject
    >;

    "OfferMade(address,uint256,address,uint256)": TypedContractEvent<
      OfferMadeEvent.InputTuple,
      OfferMadeEvent.OutputTuple,
      OfferMadeEvent.OutputObject
    >;
    OfferMade: TypedContractEvent<
      OfferMadeEvent.InputTuple,
      OfferMadeEvent.OutputTuple,
      OfferMadeEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
