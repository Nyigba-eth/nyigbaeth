/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace BaseSepoliaNyigbaNames {
  export type SubdomainConfigStruct = {
    registrationFee: BigNumberish;
    renewalFee: BigNumberish;
    premiumMultiplier: BigNumberish;
    requiresApproval: boolean;
    minLength: BigNumberish;
    maxLength: BigNumberish;
  };

  export type SubdomainConfigStructOutput = [
    registrationFee: bigint,
    renewalFee: bigint,
    premiumMultiplier: bigint,
    requiresApproval: boolean,
    minLength: bigint,
    maxLength: bigint
  ] & {
    registrationFee: bigint;
    renewalFee: bigint;
    premiumMultiplier: bigint;
    requiresApproval: boolean;
    minLength: bigint;
    maxLength: bigint;
  };
}

export interface BaseSepoliaNyigbaNamesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_BLOCK_TIME"
      | "BASE_DOMAIN"
      | "GRACE_PERIOD"
      | "LOW_GAS_OPTIMIZATION"
      | "MAX_AGENTS_PER_NAME"
      | "MAX_MULTISIG_OWNERS"
      | "REGISTRATION_PERIOD"
      | "checkAvailability"
      | "claimSubdomain"
      | "cleanupExpiredNames"
      | "config"
      | "fullDomain"
      | "getOwnedSubdomains"
      | "getSubdomainInfo"
      | "isValidSignature"
      | "owner(bytes32)"
      | "owner()"
      | "renewSubdomain"
      | "renounceOwnership"
      | "setReservedName"
      | "setText"
      | "text"
      | "transferOwnership"
      | "updateConfig"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AgentCommunication"
      | "AgentRegistered"
      | "MultiSigSetup"
      | "NameClaimed"
      | "NameExpired"
      | "NameRenewed"
      | "NameTransferred"
      | "OwnershipTransferred"
      | "PaymentRouteSet"
      | "SubdomainConfigUpdated"
      | "TextRecordSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_BLOCK_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_DOMAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOW_GAS_OPTIMIZATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_AGENTS_PER_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MULTISIG_OWNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRATION_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAvailability",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSubdomain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanupExpiredNames",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "fullDomain", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getOwnedSubdomains",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubdomainInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "owner(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renewSubdomain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setReservedName",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setText",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "text",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateConfig",
    values: [BaseSepoliaNyigbaNames.SubdomainConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_BLOCK_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_DOMAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOW_GAS_OPTIMIZATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_AGENTS_PER_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MULTISIG_OWNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRATION_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAvailability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSubdomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanupExpiredNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fullDomain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnedSubdomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubdomainInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owner(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renewSubdomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservedName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace AgentCommunicationEvent {
  export type InputTuple = [
    fromNode: BytesLike,
    toNode: BytesLike,
    message: string
  ];
  export type OutputTuple = [fromNode: string, toNode: string, message: string];
  export interface OutputObject {
    fromNode: string;
    toNode: string;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentRegisteredEvent {
  export type InputTuple = [
    node: BytesLike,
    agentId: BytesLike,
    agentAddress: AddressLike
  ];
  export type OutputTuple = [
    node: string,
    agentId: string,
    agentAddress: string
  ];
  export interface OutputObject {
    node: string;
    agentId: string;
    agentAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultiSigSetupEvent {
  export type InputTuple = [
    node: BytesLike,
    owners: AddressLike[],
    required: BigNumberish
  ];
  export type OutputTuple = [node: string, owners: string[], required: bigint];
  export interface OutputObject {
    node: string;
    owners: string[];
    required: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameClaimedEvent {
  export type InputTuple = [
    owner: AddressLike,
    label: string,
    node: BytesLike,
    expiryDate: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    label: string,
    node: string,
    expiryDate: bigint
  ];
  export interface OutputObject {
    owner: string;
    label: string;
    node: string;
    expiryDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameExpiredEvent {
  export type InputTuple = [node: BytesLike, label: string];
  export type OutputTuple = [node: string, label: string];
  export interface OutputObject {
    node: string;
    label: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameRenewedEvent {
  export type InputTuple = [
    owner: AddressLike,
    label: string,
    node: BytesLike,
    newExpiryDate: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    label: string,
    node: string,
    newExpiryDate: bigint
  ];
  export interface OutputObject {
    owner: string;
    label: string;
    node: string;
    newExpiryDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike, label: string];
  export type OutputTuple = [from: string, to: string, label: string];
  export interface OutputObject {
    from: string;
    to: string;
    label: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentRouteSetEvent {
  export type InputTuple = [
    node: BytesLike,
    routeKey: string,
    recipient: AddressLike
  ];
  export type OutputTuple = [node: string, routeKey: string, recipient: string];
  export interface OutputObject {
    node: string;
    routeKey: string;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubdomainConfigUpdatedEvent {
  export type InputTuple = [
    newConfig: BaseSepoliaNyigbaNames.SubdomainConfigStruct
  ];
  export type OutputTuple = [
    newConfig: BaseSepoliaNyigbaNames.SubdomainConfigStructOutput
  ];
  export interface OutputObject {
    newConfig: BaseSepoliaNyigbaNames.SubdomainConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TextRecordSetEvent {
  export type InputTuple = [node: BytesLike, key: string, value: string];
  export type OutputTuple = [node: string, key: string, value: string];
  export interface OutputObject {
    node: string;
    key: string;
    value: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BaseSepoliaNyigbaNames extends BaseContract {
  connect(runner?: ContractRunner | null): BaseSepoliaNyigbaNames;
  waitForDeployment(): Promise<this>;

  interface: BaseSepoliaNyigbaNamesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_BLOCK_TIME: TypedContractMethod<[], [bigint], "view">;

  BASE_DOMAIN: TypedContractMethod<[], [string], "view">;

  GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  LOW_GAS_OPTIMIZATION: TypedContractMethod<[], [bigint], "view">;

  MAX_AGENTS_PER_NAME: TypedContractMethod<[], [bigint], "view">;

  MAX_MULTISIG_OWNERS: TypedContractMethod<[], [bigint], "view">;

  REGISTRATION_PERIOD: TypedContractMethod<[], [bigint], "view">;

  checkAvailability: TypedContractMethod<
    [label: string],
    [
      [boolean, bigint, string] & {
        available: boolean;
        fee: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  claimSubdomain: TypedContractMethod<[label: string], [void], "payable">;

  cleanupExpiredNames: TypedContractMethod<
    [labels: string[]],
    [void],
    "nonpayable"
  >;

  config: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean, bigint, bigint] & {
        registrationFee: bigint;
        renewalFee: bigint;
        premiumMultiplier: bigint;
        requiresApproval: boolean;
        minLength: bigint;
        maxLength: bigint;
      }
    ],
    "view"
  >;

  fullDomain: TypedContractMethod<[_label: string], [string], "view">;

  getOwnedSubdomains: TypedContractMethod<
    [_owner: AddressLike],
    [[string[], bigint[]] & { labels: string[]; expiryDates: bigint[] }],
    "view"
  >;

  getSubdomainInfo: TypedContractMethod<
    [label: string],
    [
      [string, bigint, boolean, boolean] & {
        ownerAddress: string;
        expiryDate: bigint;
        isPremium: boolean;
        isExpired: boolean;
      }
    ],
    "view"
  >;

  isValidSignature: TypedContractMethod<
    [arg0: BytesLike, arg1: BytesLike],
    [string],
    "view"
  >;

  "owner(bytes32)": TypedContractMethod<[node: BytesLike], [string], "view">;

  "owner()": TypedContractMethod<[], [string], "view">;

  renewSubdomain: TypedContractMethod<[label: string], [void], "payable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setReservedName: TypedContractMethod<
    [name: string, reserved: boolean],
    [void],
    "nonpayable"
  >;

  setText: TypedContractMethod<
    [node: BytesLike, key: string, value: string],
    [void],
    "nonpayable"
  >;

  text: TypedContractMethod<[node: BytesLike, key: string], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateConfig: TypedContractMethod<
    [newConfig: BaseSepoliaNyigbaNames.SubdomainConfigStruct],
    [void],
    "nonpayable"
  >;

  withdrawFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_BLOCK_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "BASE_DOMAIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOW_GAS_OPTIMIZATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_AGENTS_PER_NAME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_MULTISIG_OWNERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REGISTRATION_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkAvailability"
  ): TypedContractMethod<
    [label: string],
    [
      [boolean, bigint, string] & {
        available: boolean;
        fee: bigint;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimSubdomain"
  ): TypedContractMethod<[label: string], [void], "payable">;
  getFunction(
    nameOrSignature: "cleanupExpiredNames"
  ): TypedContractMethod<[labels: string[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean, bigint, bigint] & {
        registrationFee: bigint;
        renewalFee: bigint;
        premiumMultiplier: bigint;
        requiresApproval: boolean;
        minLength: bigint;
        maxLength: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fullDomain"
  ): TypedContractMethod<[_label: string], [string], "view">;
  getFunction(
    nameOrSignature: "getOwnedSubdomains"
  ): TypedContractMethod<
    [_owner: AddressLike],
    [[string[], bigint[]] & { labels: string[]; expiryDates: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubdomainInfo"
  ): TypedContractMethod<
    [label: string],
    [
      [string, bigint, boolean, boolean] & {
        ownerAddress: string;
        expiryDate: bigint;
        isPremium: boolean;
        isExpired: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignature"
  ): TypedContractMethod<[arg0: BytesLike, arg1: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner(bytes32)"
  ): TypedContractMethod<[node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renewSubdomain"
  ): TypedContractMethod<[label: string], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReservedName"
  ): TypedContractMethod<
    [name: string, reserved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setText"
  ): TypedContractMethod<
    [node: BytesLike, key: string, value: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "text"
  ): TypedContractMethod<[node: BytesLike, key: string], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateConfig"
  ): TypedContractMethod<
    [newConfig: BaseSepoliaNyigbaNames.SubdomainConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AgentCommunication"
  ): TypedContractEvent<
    AgentCommunicationEvent.InputTuple,
    AgentCommunicationEvent.OutputTuple,
    AgentCommunicationEvent.OutputObject
  >;
  getEvent(
    key: "AgentRegistered"
  ): TypedContractEvent<
    AgentRegisteredEvent.InputTuple,
    AgentRegisteredEvent.OutputTuple,
    AgentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "MultiSigSetup"
  ): TypedContractEvent<
    MultiSigSetupEvent.InputTuple,
    MultiSigSetupEvent.OutputTuple,
    MultiSigSetupEvent.OutputObject
  >;
  getEvent(
    key: "NameClaimed"
  ): TypedContractEvent<
    NameClaimedEvent.InputTuple,
    NameClaimedEvent.OutputTuple,
    NameClaimedEvent.OutputObject
  >;
  getEvent(
    key: "NameExpired"
  ): TypedContractEvent<
    NameExpiredEvent.InputTuple,
    NameExpiredEvent.OutputTuple,
    NameExpiredEvent.OutputObject
  >;
  getEvent(
    key: "NameRenewed"
  ): TypedContractEvent<
    NameRenewedEvent.InputTuple,
    NameRenewedEvent.OutputTuple,
    NameRenewedEvent.OutputObject
  >;
  getEvent(
    key: "NameTransferred"
  ): TypedContractEvent<
    NameTransferredEvent.InputTuple,
    NameTransferredEvent.OutputTuple,
    NameTransferredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentRouteSet"
  ): TypedContractEvent<
    PaymentRouteSetEvent.InputTuple,
    PaymentRouteSetEvent.OutputTuple,
    PaymentRouteSetEvent.OutputObject
  >;
  getEvent(
    key: "SubdomainConfigUpdated"
  ): TypedContractEvent<
    SubdomainConfigUpdatedEvent.InputTuple,
    SubdomainConfigUpdatedEvent.OutputTuple,
    SubdomainConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TextRecordSet"
  ): TypedContractEvent<
    TextRecordSetEvent.InputTuple,
    TextRecordSetEvent.OutputTuple,
    TextRecordSetEvent.OutputObject
  >;

  filters: {
    "AgentCommunication(bytes32,bytes32,string)": TypedContractEvent<
      AgentCommunicationEvent.InputTuple,
      AgentCommunicationEvent.OutputTuple,
      AgentCommunicationEvent.OutputObject
    >;
    AgentCommunication: TypedContractEvent<
      AgentCommunicationEvent.InputTuple,
      AgentCommunicationEvent.OutputTuple,
      AgentCommunicationEvent.OutputObject
    >;

    "AgentRegistered(bytes32,bytes32,address)": TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;
    AgentRegistered: TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;

    "MultiSigSetup(bytes32,address[],uint256)": TypedContractEvent<
      MultiSigSetupEvent.InputTuple,
      MultiSigSetupEvent.OutputTuple,
      MultiSigSetupEvent.OutputObject
    >;
    MultiSigSetup: TypedContractEvent<
      MultiSigSetupEvent.InputTuple,
      MultiSigSetupEvent.OutputTuple,
      MultiSigSetupEvent.OutputObject
    >;

    "NameClaimed(address,string,bytes32,uint256)": TypedContractEvent<
      NameClaimedEvent.InputTuple,
      NameClaimedEvent.OutputTuple,
      NameClaimedEvent.OutputObject
    >;
    NameClaimed: TypedContractEvent<
      NameClaimedEvent.InputTuple,
      NameClaimedEvent.OutputTuple,
      NameClaimedEvent.OutputObject
    >;

    "NameExpired(bytes32,string)": TypedContractEvent<
      NameExpiredEvent.InputTuple,
      NameExpiredEvent.OutputTuple,
      NameExpiredEvent.OutputObject
    >;
    NameExpired: TypedContractEvent<
      NameExpiredEvent.InputTuple,
      NameExpiredEvent.OutputTuple,
      NameExpiredEvent.OutputObject
    >;

    "NameRenewed(address,string,bytes32,uint256)": TypedContractEvent<
      NameRenewedEvent.InputTuple,
      NameRenewedEvent.OutputTuple,
      NameRenewedEvent.OutputObject
    >;
    NameRenewed: TypedContractEvent<
      NameRenewedEvent.InputTuple,
      NameRenewedEvent.OutputTuple,
      NameRenewedEvent.OutputObject
    >;

    "NameTransferred(address,address,string)": TypedContractEvent<
      NameTransferredEvent.InputTuple,
      NameTransferredEvent.OutputTuple,
      NameTransferredEvent.OutputObject
    >;
    NameTransferred: TypedContractEvent<
      NameTransferredEvent.InputTuple,
      NameTransferredEvent.OutputTuple,
      NameTransferredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentRouteSet(bytes32,string,address)": TypedContractEvent<
      PaymentRouteSetEvent.InputTuple,
      PaymentRouteSetEvent.OutputTuple,
      PaymentRouteSetEvent.OutputObject
    >;
    PaymentRouteSet: TypedContractEvent<
      PaymentRouteSetEvent.InputTuple,
      PaymentRouteSetEvent.OutputTuple,
      PaymentRouteSetEvent.OutputObject
    >;

    "SubdomainConfigUpdated(tuple)": TypedContractEvent<
      SubdomainConfigUpdatedEvent.InputTuple,
      SubdomainConfigUpdatedEvent.OutputTuple,
      SubdomainConfigUpdatedEvent.OutputObject
    >;
    SubdomainConfigUpdated: TypedContractEvent<
      SubdomainConfigUpdatedEvent.InputTuple,
      SubdomainConfigUpdatedEvent.OutputTuple,
      SubdomainConfigUpdatedEvent.OutputObject
    >;

    "TextRecordSet(bytes32,string,string)": TypedContractEvent<
      TextRecordSetEvent.InputTuple,
      TextRecordSetEvent.OutputTuple,
      TextRecordSetEvent.OutputObject
    >;
    TextRecordSet: TypedContractEvent<
      TextRecordSetEvent.InputTuple,
      TextRecordSetEvent.OutputTuple,
      TextRecordSetEvent.OutputObject
    >;
  };
}
